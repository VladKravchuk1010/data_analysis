import sqlite3
import time
from itertools import groupby
from textwrap import dedent


def display_help():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é"""
    print("\n" + "=" * 50)
    print("üìã –ò–ù–°–¢–†–£–ö–¶–ò–Ø –ü–û –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ".center(50))
    print("=" * 50)
    print(dedent("""
    1. –î–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–æ—Å—Ç—É–ø–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ –Ω–∞—Å–µ–ª–µ–Ω–∏–∏ –∑–∞ –≥–æ–¥—ã:
       1970, 1980, 1990, 2000, 2010, 2015, 2020, 2022
    2. –ú–æ–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å –∫–∞–∫ –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã, —Ç–∞–∫ –∏ —á–∞—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è
    3. –î–ª—è –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–≤–æ–¥–∏—Ç–µ 'n'
    """))


def display_countries(conn):
    """–í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω —Å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π –ø–æ –ø–µ—Ä–≤–æ–π –±—É–∫–≤–µ"""
    cursor = conn.cursor()
    cursor.execute("SELECT DISTINCT countryterritory FROM world_population ORDER BY countryterritory")
    countries = [row[0] for row in cursor.fetchall()]

    print("\n" + "=" * 50)
    print("üåç –°–ü–ò–°–û–ö –î–û–°–¢–£–ü–ù–´–• –°–¢–†–ê–ù üåé".center(50))
    print("=" * 50)

    for letter, group in groupby(countries, key=lambda x: x[0].upper()):
        country_group = list(group)
        print(f"\nüî† {letter}:")
        for i in range(0, len(country_group), 5):
            print(", ".join(country_group[i:i + 5]))


def get_user_input(conn):
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    display_help()
    display_countries(conn)

    print("\n" + "üîπ –ù–ê–°–¢–†–û–ô–ö–ê –ü–ê–†–ê–ú–ï–¢–†–û–í üîπ".center(50, "~"))

    # –í–≤–æ–¥ –≥–æ–¥–∞ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
    while True:
        print("\n‚ïî" + "‚ïê" * 48 + "‚ïó")
        print("‚ïë {:^46} ‚ïë".format("–í–í–ï–î–ò–¢–ï –ì–û–î –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê (1970-2022)"))
        print("‚ïö" + "‚ïê" * 48 + "‚ïù")
        year = input(">>> –í–∞—à –≤—ã–±–æ—Ä (–∏–ª–∏ 'n' –¥–ª—è 2022): ").strip().lower()

        if not year:
            year = "2022"
            break
        if year == 'n':
            year = "2022"
            break
        if year.replace("_", "").isdigit() and int(year.replace("_", "")) in range(1970, 2023):
            year = year.replace("_", "")
            break
        print("‚ö†Ô∏è –û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≥–æ–¥ –º–µ–∂–¥—É 1970 –∏ 2022")

    # –í–≤–æ–¥ —Å—Ç—Ä–∞–Ω—ã
    print("\n‚ïî" + "‚ïê" * 48 + "‚ïó")
    print("‚ïë {:^46} ‚ïë".format("–í–í–ï–î–ò–¢–ï –ù–ê–ó–í–ê–ù–ò–ï –°–¢–†–ê–ù–´ –ò–ó –°–ü–ò–°–ö–ê"))
    print("‚ïö" + "‚ïê" * 48 + "‚ïù")
    country = input(">>> –í–∞—à –≤—ã–±–æ—Ä (–∏–ª–∏ 'n' –¥–ª—è China/India): ").strip().lower()
    if not country or country == 'n':
        country = "china"

    # –í–≤–æ–¥ –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    print("\n" + "=" * 50)
    print("üìÖ –í–´–ë–ï–†–ò–¢–ï –ü–ï–†–ò–û–î –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê –ò–ó–ú–ï–ù–ï–ù–ò–Ø –ù–ê–°–ï–õ–ï–ù–ò–Ø".center(50))
    print("=" * 50)

    while True:
        print("\n‚ïî" + "‚ïê" * 48 + "‚ïó")
        print("‚ïë {:^46} ‚ïë".format("–í–í–ï–î–ò–¢–ï –ù–ê–ß–ê–õ–¨–ù–´–ô –ì–û–î (1970-2020)"))
        print("‚ïö" + "‚ïê" * 48 + "‚ïù")
        start_year = input(">>> –í–∞—à –≤—ã–±–æ—Ä (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1970): ").strip()
        if not start_year:
            start_year = "1970"
            break
        if start_year.replace("_", "").isdigit() and int(start_year.replace("_", "")) in range(1970, 2021):
            break
        print("‚ö†Ô∏è –û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≥–æ–¥ –º–µ–∂–¥—É 1970 –∏ 2020")

    while True:
        print("\n‚ïî" + "‚ïê" * 48 + "‚ïó")
        print("‚ïë {:^46} ‚ïë".format(f"–í–í–ï–î–ò–¢–ï –ö–û–ù–ï–ß–ù–´–ô –ì–û–î ({int(start_year) + 1}-2022)"))
        print("‚ïö" + "‚ïê" * 48 + "‚ïù")
        end_year = input(">>> –í–∞—à –≤—ã–±–æ—Ä (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 2022): ").strip()
        if not end_year:
            end_year = "2022"
            break
        if (end_year.replace("_", "").isdigit() and
                int(end_year.replace("_", "")) > int(start_year) and
                int(end_year.replace("_", "")) <= 2022):
            break
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –≥–æ–¥ –º–µ–∂–¥—É {int(start_year) + 1} –∏ 2022")

    return year, country, start_year, end_year


def run_optimized_query(conn, query, description, params=None):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å"""
    cursor = conn.cursor()

    start_time = time.time()
    cursor.execute(query, params) if params else cursor.execute(query)
    results = cursor.fetchall()
    end_time = time.time()

    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print("\n" + "üîπ –†–ï–ó–£–õ–¨–¢–ê–¢–´ üîπ".center(50, "~"))
    print(f"\nüìå {description}")
    print(f"‚è± –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {end_time - start_time:.4f} —Å–µ–∫")

    if results:
        print("\n" + " –¢–û–ü –†–ï–ó–£–õ–¨–¢–ê–¢–û–í ".center(50, "="))
        for i, row in enumerate(results[:15], 1):
            formatted_row = []
            for item in row:
                if isinstance(item, (int, float)):
                    formatted_num = f"{abs(item):,}"
                    if item < 0:
                        formatted_num = f"-{formatted_num}"
                    formatted_row.append(formatted_num)
                else:
                    formatted_row.append(str(item))
            print(f"{i}. {' | '.join(formatted_row)}")
    else:
        print("\n‚ö†Ô∏è –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
    print("=" * 50)


def main():
    print("\n" + "=" * 50)
    print("üåé –ê–ù–ê–õ–ò–ó –î–ê–ù–ù–´–• –û –ù–ê–°–ï–õ–ï–ù–ò–ò –ú–ò–†–ê üåè".center(50))
    print("=" * 50)

    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
    conn = sqlite3.connect("../database/world_population.db")

    # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤
    conn.executescript("""
    CREATE INDEX IF NOT EXISTS idx_country ON world_population(countryterritory);
    CREATE INDEX IF NOT EXISTS idx_population_years ON world_population(
        population_1970, population_1980, population_1990, 
        population_2000, population_2010, population_2015,
        population_2020, population_2022
    );
    """)

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    year, country, start_year, end_year = get_user_input(conn)

    # 1. –ó–∞–ø—Ä–æ—Å —Ç–æ–ø–∞ —Å—Ç—Ä–∞–Ω
    query1 = f"""
    SELECT countryterritory, population_{year} 
    FROM world_population 
    WHERE population_{year} > 10000000 
    ORDER BY population_{year} DESC
    LIMIT 15
    """
    run_optimized_query(conn, query1, f"–¢–æ–ø —Å—Ç—Ä–∞–Ω –ø–æ –Ω–∞—Å–µ–ª–µ–Ω–∏—é –≤ {year} –≥–æ–¥—É")

    # 2. –ü–æ–∏—Å–∫ —Å—Ç—Ä–∞–Ω
    query2 = """
    SELECT countryterritory, population_2022 
    FROM world_population 
    WHERE LOWER(countryterritory) LIKE ? 
    ORDER BY population_2022 DESC
    LIMIT 15
    """
    run_optimized_query(conn, query2, f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ '{country}'", (f"%{country}%",))

    # 3. –ê–Ω–∞–ª–∏–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å–µ–ª–µ–Ω–∏—è (–∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—Ä–∏—Ä–æ—Å—Ç)
    query3 = f"""
    SELECT 
        countryterritory,
        population_{start_year},
        population_{end_year},
        (population_{end_year} - population_{start_year}) AS population_growth,
        ROUND((population_{end_year} - population_{start_year}) * 100.0 / 
            NULLIF(population_{start_year}, 0), 2) AS growth_percent
    FROM world_population
    WHERE population_{start_year} IS NOT NULL
      AND population_{end_year} IS NOT NULL
      AND population_{start_year} > 0
    ORDER BY population_growth DESC
    LIMIT 15
    """
    run_optimized_query(conn, query3,
                        f"–°—Ç—Ä–∞–Ω—ã —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –ø—Ä–∏—Ä–æ—Å—Ç–æ–º –Ω–∞—Å–µ–ª–µ–Ω–∏—è ({start_year}-{end_year})")

    # 4. –ê–Ω–∞–ª–∏–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å–µ–ª–µ–Ω–∏—è (–ø—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–π —Ä–æ—Å—Ç)
    query4 = f"""
    SELECT 
        countryterritory,
        population_{start_year},
        population_{end_year},
        (population_{end_year} - population_{start_year}) AS population_growth,
        ROUND((population_{end_year} - population_{start_year}) * 100.0 / 
            NULLIF(population_{start_year}, 0), 2) AS growth_percent
    FROM world_population
    WHERE population_{start_year} IS NOT NULL
      AND population_{end_year} IS NOT NULL
      AND population_{start_year} > 1000000 
    ORDER BY growth_percent DESC
    LIMIT 15
    """
    run_optimized_query(conn, query4,
                        f"–°—Ç—Ä–∞–Ω—ã —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–º —Ä–æ—Å—Ç–æ–º ({start_year}-{end_year})")

    conn.close()
    print("\n" + "=" * 50)
    print(" –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–Å–ù ".center(50, "‚ú®"))
    print("=" * 50)


if __name__ == "__main__":
    main()